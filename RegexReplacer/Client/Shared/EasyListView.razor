@using RegexReplacer.Shared.DisplayHelper
@using System.Reflection

@typeparam TItem where TItem : UpdatableBase

<h3>EasyListView</h3>

<RadzenDataGrid @ref="itemGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Multiple"
                Data="@items" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" TItem="TItem">
    <Columns>
        @if (!UseCustomColumns)
        {
            foreach ((PropertyInfo info, ColumnDefinitionAttribute attribute) in GetColumns())
            {
                <EasyColumn PropertyInfo="info" Attribute="attribute" TableMode="TableDisplayMode"/>
            }
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }

        @if (AllowEdit)
        {
            <RadzenDataGridColumn TItem="TItem" Context="sampleBlazorModelsSampleTItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="item">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(item))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(item))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(item))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }

        @if (OnUpload != null)
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="5%">
                <Template Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="upload" Class="m-1" Click="@(args => OnUpload?.Invoke(item))" />
                </Template>
                <EditTemplate Context="item">
                </EditTemplate>
            </RadzenDataGridColumn>
        }

        @if (AllowDelete)
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="5%">
                <Template Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => DeleteRow(item))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => DeleteRow(item))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter]
    public bool AllowEdit { get; set; } = true;

    [Parameter]
    public bool AllowDelete { get; set; } = true;

    [Parameter]
    public bool UseCustomColumns { get; set; } = false;

    [Parameter]
    public DisplayMode TableDisplayMode { get; set; } = DisplayMode.Always;

    [Parameter]
    public Action<TItem>? OnUpload { get; set; }

    [Parameter]
    public Action<TItem>? OnChanged { get; set; }


    [Parameter]
    public IList<TItem> Items { get => items; set => items = value; }


    IList<TItem> items = new List<TItem>();

    RadzenDataGrid<TItem>? itemGrid;
    TItem? itemToInsert = default;

    List<(PropertyInfo Info, ColumnDefinitionAttribute Attribute)> GetColumns()
    {
        return items?.GetNestedType()
                     .GetPropertyWithAttribute<ColumnDefinitionAttribute>()
                     ?? new();
    }

    async Task EditRow(TItem item)
    {
        if (itemGrid == default)
            return;

        await itemGrid.EditRow(item);
    }

    async Task OnUpdateRow(TItem item)
    {
        if (item == itemToInsert)
        {
            itemToInsert = default;
        }

        await AddOrUpdateAsync(item);
    }

    async Task SaveRow(TItem item)
    {
        if (itemGrid == default)
            return;

        if (item == itemToInsert)
        {
            itemToInsert = default;
        }

        await itemGrid.UpdateRow(item);

        OnChanged?.Invoke(item);
    }

    void CancelEdit(TItem item)
    {
        if (itemGrid == default)
            return;

        if (item == itemToInsert)
        {
            itemToInsert = default;
        }

        itemGrid.CancelEditRow(item);
    }

    async Task DeleteRow(TItem item)
    {
        if (itemGrid == default)
            return;

        if (item == itemToInsert)
        {
            itemToInsert = default;
        }

        if (items.Contains(item))
        {
            items.Remove(item);

            await itemGrid.Reload();
        }
        else
        {
            itemGrid.CancelEditRow(item);
        }
    }


    async Task InsertRow()
    {
        if (itemGrid == default)
            return;

        itemToInsert = UpdatableBase.GetNew<TItem>();
        await itemGrid.InsertRow(itemToInsert);
    }

    private async Task AddOrUpdateAsync(TItem item)
    {
        if (itemGrid == default)
            return;

        var tempRule = items.FirstOrDefault(x => x.Id == item.Id);
        if (tempRule != null)
        {
            tempRule.Update(item);
            await itemGrid.UpdateRow(item);
        }
        else
        {
            items.Add(item);
            await itemGrid.UpdateRow(item);
        }
        await itemGrid.Reload();
    }

    async Task OnCreateRow(TItem item)
    {
        await AddOrUpdateAsync(item);
    }
}
