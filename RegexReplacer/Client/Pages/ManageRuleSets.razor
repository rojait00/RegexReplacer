@page "/managerulesets"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using RadzenHelper
@using RadzenHelper.Views
@using RegexReplacer.Client.Helper
@using RegexReplacer.Client.ListViewItems
@using RegexReplacer.Shared

@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject NotificationService notificationService
@inject NavigationManager navigationManager

<PageTitle>Manage Rule Sets</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h5>You are not logged in. Consider to log in or create an account to be able to upload your rule sets to the cloud.</h5>
        <a href="authentication/register">Register</a>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>


<EasyListView TItem="RuleSet" Items="localRuleSets" SpecialActions=@(new List<SpecialRowAction<RuleSet>>() {goToAction})>

</EasyListView>





@code {
    private RuleSetListViewItems localRuleSets = new RuleSetListViewItems();
    private List<RuleSet> remoteRuleSets = new();

    SpecialRowAction<RuleSet> goToAction = new("settings", GoTo);

    RuleSetHelper? ruleSetHelper;

    public static  void GoTo(RuleSet ruleSet, ServiceContainer serviceContainer)
    {
        serviceContainer.NavigationManager?.NavigateTo($"/editruleset/{ruleSet.Id}");

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ruleSetHelper = await RuleSetHelper.GetRuleSetHelper(jsRuntime);
        await localRuleSets.Init(ruleSetHelper, notificationService);

        //try
        //{
        //    var newRuleSets = await Http.GetFromJsonAsync<RuleSet[]>("RuleSet") ?? Array.Empty<RuleSet>();
        //    remoteRuleSets.AddRange(newRuleSets);
        //}
        //catch (Exception exception)
        //{
        //    notificationService.Notify(new NotificationMessage
        //        {
        //            Summary = "Could not load cloud Rule Sets",
        //            Detail = exception.Message,
        //            Severity = NotificationSeverity.Warning,
        //            Duration = 3000
        //        });
        //}
    }



    //async Task Upload(RuleSet ruleSet)
    //{
    //    // ToDo: Upload
    //}

    //async Task Download(RuleSet ruleSet)
    //{
    //    // ToDo: Download
    //}
}
