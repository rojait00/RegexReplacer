@page "/"
@using RegexReplacer.Client.Helper
@using System.Text.RegularExpressions
@inject IJSRuntime jsRuntime

<PageTitle>Index</PageTitle>

<RadzenSplitter class="full-h, full-w">
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@input class="full-h, full-w" Change=@(args => OnChange())></RadzenTextArea>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="20%" Min="30px" Max="90%">
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@selectedSets Multiple="true" Placeholder="Select Rule Set..." Data=@ruleSetHelper?.GetRuleSetNames(false) Class="full-w" />

        @*<RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            @bind-Value=@selectedOptions Multiple="true" Placeholder="Select Regex Options..."
            Data=@regexOptions Class="full-w" />*@

        @*<RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@selectedOptions Multiple="true" Data=@regexOptions TextProperty="Name" ValueProperty="Value"
                        Placeholder="Select Regex Option..." Class="full-w">
        </RadzenDropDown>*@

        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@selectedOptions Multiple="true" Data=@regexOptions TextProperty="Name" ValueProperty="Value"
                           Placeholder="Select Regex Option..." Class="full-w"/>

    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@output ReadOnly=true class="full-h, full-w"></RadzenTextArea>
    </RadzenSplitterPane>
</RadzenSplitter>


@code
{
    string input = "";
    string output = "";

    RuleSetHelper? ruleSetHelper;

    IEnumerable<string> selectedSets = new List<string>() { RuleSetHelper.All };

    IEnumerable<int> selectedOptions = new List<int>() { (int)RegexOptions.IgnoreCase };
    IEnumerable<RegexOptionsHelper> regexOptions = GetOptions();


    protected override void OnInitialized()
    {
        ruleSetHelper = new RuleSetHelper(jsRuntime);
        base.OnInitialized();
    }

    public void OnChange()
    {
        if (ruleSetHelper == null)
            return;

        ruleSetHelper.SelectedRegexOptions = selectedOptions.Select(x => RegexOptionsHelper.GetByValue(x));
        output = ruleSetHelper?.Generate(input, selectedSets) ?? string.Empty;
    }

    private static IEnumerable<RegexOptionsHelper> GetOptions()
    {
        return ((RegexOptions[])Enum.GetValues(typeof(RegexOptions))).Select(x => new RegexOptionsHelper(x));
    }

}