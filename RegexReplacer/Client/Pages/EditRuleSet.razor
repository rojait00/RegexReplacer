@page "/editruleset"
@page "/editruleset/{Id}"
@using RegexReplacer.Client.Helper
@using RegexReplacer.Client.ListViewItems
@using RegexReplacer.Shared
@using RadzenHelper.Views
@inject NotificationService notificationService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<PageTitle>Edit Rule Set</PageTitle>

<h1>Edit Rule Set</h1>

@if (!ruleSets.Any())
{
    <h4>No Rule Sets defined. Please go to "Manage Rule Sets" and add a new Rule Set.</h4>
    <RadzenButton Click=@(args => navigationManager.NavigateTo("/managerulesets")) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
}
else
{
    <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Placeholder="Select Rule Set Name..." Multiple="false" Class="w-25"
                @bind-Value=@items.RuleSet Data=@ruleSets TextProperty="Name" Change=@OnChange />
    <EasyListView TItem="Rule" Items="items">
    </EasyListView>
}

@code {
    RuleSetHelper? ruleSetHelper = null;

    IEnumerable<RuleSet> ruleSets = Array.Empty<RuleSet>();

    RuleListViewItems items = new RuleListViewItems();

    List<RegexFunction> regexFunctions = EnumHelper.GetEnums<RegexFunction>();

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ruleSetHelper = await RuleSetHelper.GetRuleSetHelper(jsRuntime);
        await items.Init(ruleSetHelper, notificationService);
        ruleSets = ruleSetHelper.RuleSets;

        if (Guid.TryParse(Id ?? "", out var id))
        {
            var newRuleSet = ruleSets.FirstOrDefault(x => x.Id == id);
            if (newRuleSet != null)
            {
                items.RuleSet = newRuleSet;
                await items.LoadItems();
            }
        }

    }

    public async Task OnChange(object? selection)
    {
        await items.LoadItems();
    }

}