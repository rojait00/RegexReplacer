@page "/"
@using RegexReplacer.Client.Helper
@using System.Text.RegularExpressions
@inject IJSRuntime jsRuntime

<PageTitle>Index</PageTitle>

<RadzenSplitter class="full-h, full-w">
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@input class="full-h, full-w" Change=@(args => OnChange())></RadzenTextArea>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="20%" Min="30px" Max="90%">
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@selectedSets Multiple="true" Placeholder="Select Rule Set..." Data=@ruleSetHelper?.GetRuleSetNames(false) Class="full-w" />

        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@selectedOptions Multiple="true" Placeholder="Select Regex Options..." 
                        Data=@regexOptions Class="full-w" />

    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@output ReadOnly=true class="full-h, full-w"></RadzenTextArea>
    </RadzenSplitterPane>
</RadzenSplitter>


@code
{
    string input = "";
    string output = "";

    RuleSetHelper? ruleSetHelper;

    IEnumerable<string> selectedSets = new List<string>() { RuleSetHelper.All };

    IEnumerable<RegexOptions> selectedOptions = new List<RegexOptions>() { RegexOptions.IgnoreCase };
    IEnumerable<RegexOptions> regexOptions = (RegexOptions[])Enum.GetValues(typeof(RegexOptions));


    protected override void OnInitialized()
    {
        ruleSetHelper = new RuleSetHelper(jsRuntime);
        base.OnInitialized();
    }

    public void OnChange()
    {
        if(ruleSetHelper == null)
            return;

        ruleSetHelper.SelectedRegexOptions = selectedOptions;
        output = ruleSetHelper.Generate(input, selectedSets) ?? string.Empty;
    }
}