@page "/"
@using RegexReplacer.Client.Helper
@using System.Text.RegularExpressions
@using RegexReplacer.Shared
@inject IJSRuntime jsRuntime

<PageTitle>Regex Replacer</PageTitle>

<RadzenSplitter class="full-h, full-w">
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@input class="full-h, full-w" @oninput=@((args) => OnChangeText(args.Value?.ToString()))></RadzenTextArea>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="20%" Min="30px" Max="90%">
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Placeholder="Select Rule Set..." Multiple="true" Class="full-w" Change=@OnChange
                        @bind-Value=@selectedRuleSets Data=@ruleSets TextProperty="Name" />

        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Placeholder="Select Option..." Multiple="true" Class="full-w" Change=@OnChange
                        @bind-Value=@selectedOptions Data=@regexOptions />
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@output ReadOnly=true class="full-h, full-w"></RadzenTextArea>
    </RadzenSplitterPane>
</RadzenSplitter>

@code
{
    string input = "";
    string output = "";

    RuleSetHelper? ruleSetHelper;

    List<RegexOptions> regexOptions = EnumHelper.GetEnums<RegexOptions>();
    IEnumerable<RegexOptions> selectedOptions = new List<RegexOptions>() { RegexOptions.IgnoreCase };

    List<RuleSet> ruleSets = new();
    IEnumerable<RuleSet> selectedRuleSets = new List<RuleSet>();

    protected override async Task OnInitializedAsync()
    {
        ruleSetHelper = await RuleSetHelper.GetRuleSetHelper(jsRuntime);
        ruleSets = ruleSetHelper.RuleSets;
        selectedRuleSets = ruleSets.ToList();

        await base.OnInitializedAsync();
    }

    public void OnChange(object? selection)
    {
        Generate();
    }

    public void OnChangeText(string? newInput)
    {
        if (newInput != null)
        {
            input = newInput;
        }

        Generate();
    }

    public void Generate()
    {
        if (ruleSetHelper == null)
            return;

        var optionList = selectedOptions.ToList();

        output = ruleSetHelper.Generate(input, selectedRuleSets.ToList(), optionList);
    }
}