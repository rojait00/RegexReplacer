@page "/"
@using RegexReplacer.Client.Helper
@using System.Text.RegularExpressions
@inject IJSRuntime jsRuntime

<PageTitle>Index</PageTitle>

<RadzenSplitter class="full-h, full-w">
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@input class="full-h, full-w" Change=@(args => OnChange())></RadzenTextArea>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="20%" Min="30px" Max="90%">
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Placeholder="Select Rule Set..." Multiple="true" Class="full-w"
                        @bind-Value=@selectedRuleSets Data=@ruleSets />

        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Placeholder="Select Option..." Multiple="true" Class="full-w"
                        @bind-Value=@selectedOptions Data=@regexOptions />
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Min="30px" Max="90%">
        <RadzenTextArea @bind-Value=@output ReadOnly=true class="full-h, full-w"></RadzenTextArea>
    </RadzenSplitterPane>
</RadzenSplitter>

@code
{
    string input = "";
    string output = "";

    RuleSetHelper? ruleSetHelper;

    IEnumerable<RegexOptions> regexOptions = GetOptions();
    IEnumerable<RegexOptions> selectedOptions = new[] { RegexOptions.IgnoreCase };

    IEnumerable<string> ruleSets = Array.Empty<string>();
    IEnumerable<string> selectedRuleSets = Array.Empty<string>();

    protected override void OnInitialized()
    {
        ruleSetHelper = new RuleSetHelper(jsRuntime);
        ruleSets = ruleSetHelper.GetRuleSetNames();
        selectedRuleSets = ruleSets;
        base.OnInitialized();
    }

    public void OnChange()
    {
        if (ruleSetHelper == null)
            return;

        ruleSetHelper.SelectedRegexOptions = selectedOptions;
        output = ruleSetHelper.Generate(input, selectedRuleSets);
    }

    private static List<RegexOptions> GetOptions()
    {
        var values = (RegexOptions[])Enum.GetValues(typeof(RegexOptions));
        return values.ToList();
    }
}